build: false
platform:
  - x64
#matrix:
#  fast_finish: true # kills the build at the first failure
clone_folder: C:\projects\dbal
clone_depth: 2

cache:
  - C:\ProgramData\chocolatey\bin -> .appveyor.yml
  - C:\ProgramData\chocolatey\lib -> .appveyor.yml
  - '%ProgramFiles%\WindowsPowerShell\Modules\PhpManager -> .appveyor.yml'
  - C:\tools\php -> .appveyor.yml
  - C:\tools\composer -> .appveyor.yml
  - C:\tools\ocular -> .appveyor.yml
  - '%LOCALAPPDATA%\Composer\files -> composer.json'

## Build matrix for lowest and highest possible targets
environment:
  matrix:
  - db: mssql
    driver: sqlsrv
    db_version: sql2008r2sp2
    coverage: yes
    php: 7.2
  - db: mssql
    driver: sqlsrv
    db_version: sql2012sp1
    php: 7.2
    coverage: yes
  - db: mssql
    driver: sqlsrv
    db_version: sql2017
    coverage: no
    php: 7.2
  - db: mssql
    driver: pdo_sqlsrv
    db_version: sql2017
    php: 7.2
    coverage: yes

init:
  - SET PATH=C:\Program Files\OpenSSL;c:\tools\php;C:\tools\composer;C:\tools\ocular;%PATH%
  - SET COMPOSER_NO_INTERACTION=1
  - SET ANSICON=121x90 (121x90)

## Install PHP and composer, and run the appropriate composer command
install:
    - ps: |
        # install PhpManager
        if (-Not(Get-Module -Name PhpManager -ListAvailable)) {
          if (-Not(Get-PackageProvider -Name NuGet -ErrorAction SilentlyContinue | Where-Object { $_.Version -ge '2.8.5.201'})) {
            Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force | Out-Null
          }
          Install-Module -Name PhpManager -Force -SkipPublisherCheck
        }

        # Check if installation is cached
        if (!(Test-Path c:\tools\php)) {

          # install PHP
          Install-Php -Version $env:php -Architecture $env:platform -ThreadSafe $false -Path c:\tools\php -TimeZone UTC -AddToPath System -InitialPhpIni Production

          # download and configure CA bundle
          Update-PhpCAInfo

          # configure PHP
          Set-PhpIniKey -Key memory_limit -Value 1G

          # enable PHP extensions
          Enable-PhpExtension -Extension openssl
          Enable-PhpExtension -Extension mbstring
          Enable-PhpExtension -Extension fileinfo
          Enable-PhpExtension -Extension pdo_sqlite
          Enable-PhpExtension -Extension sqlite3
          Enable-PhpExtension -Extension curl

          # download and enable PHP extensions
          Install-PhpExtension -Extension sqlsrv
          Write-Host "sqlsrv version: $((Get-PhpExtension | Where-Object { $_.Handle -eq 'sqlsrv' }).Version)"
          Install-PhpExtension -Extension pdo_sqlsrv
          Write-Host "pdo_sqlsrv version: $((Get-PhpExtension | Where-Object { $_.Handle -eq 'pdo_sqlsrv' }).Version)"
          Install-PhpExtension -Extension xdebug -DontEnable
          Write-Host "xdebug version: $((Get-PhpExtension | Where-Object { $_.Handle -eq 'xdebug' }).Version)"

          # download Composer
          if (!(Test-Path C:\tools\composer)) {
            New-Item -Path c:\tools -Name composer -ItemType Directory | Out-Null
          }
          if (!(Test-Path c:\tools\composer\composer.phar)) {
            appveyor-retry appveyor DownloadFile https://getcomposer.org/composer.phar -Filename C:\tools\composer\composer.phar
            Set-Content -path 'C:\tools\composer\composer.bat' -Value ('@php C:\tools\composer\composer.phar %*')
          }

          # download Scrutinizer's Ocular
          if (!(Test-Path C:\tools\ocular)) {
            New-Item -Path c:\tools -Name ocular -ItemType Directory | Out-Null
          }
          if (!(Test-Path c:\tools\ocular\ocular.phar)) {
            appveyor-retry appveyor DownloadFile https://github.com/scrutinizer-ci/ocular/releases/download/1.5.2/ocular.phar -Filename C:\tools\ocular\ocular.phar
            Set-Content -path 'C:\tools\ocular\ocular.bat' -Value ('@php C:\tools\ocular\ocular.phar %*')
          }
        }
    # install composer dependencies
    - cd C:\projects\dbal
    - rm composer.lock
    - appveyor-retry composer self-update
    - appveyor-retry composer install --no-progress --prefer-dist

before_test:
# Selectively start the services
  - ps: >-
      if ($env:db -eq "mssql") {
        $instanceName = $env:db_version.ToUpper()
        net start "MSSQL`$$instanceName"
      }

test_script:
  - cd C:\projects\dbal
  - ps: >-
      if ($env:db_version) {
        $env:phpunit_config = "tests\appveyor\$($env:db).$($env:db_version).$($env:driver).appveyor.xml"
      } else {
        $env:phpunit_config = "tests\appveyor\$($env:db).$($env:driver).appveyor.xml"
      }
  - ps: >-
      if ($env:coverage -eq "yes") {
        Enable-PhpExtension -Extension xdebug
        vendor\bin\phpunit -c $($env:phpunit_config) --coverage-clover clover.xml
        Disable-PhpExtension -Extension xdebug
        appveyor-retry ocular code-coverage:upload --format=php-clover clover.xml
      } else {
        vendor\bin\phpunit -c $($env:phpunit_config)
      }
