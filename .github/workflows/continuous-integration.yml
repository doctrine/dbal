
name: "Continuous Integration"

on: ["pull_request", "push"]

jobs:
  static-analysis-phpstan:
    name: "Static Analysis with PHPStan"
    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "7.4"

    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v2"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          php-version: "${{ matrix.php-version }}"
          tools: "cs2pr"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v1"
        with:
          path: "~/.composer/cache"
          key: "php-${{ matrix.php-version }}-composer-locked-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-locked-"

      - name: "Install dependencies with composer"
        run: "composer install --no-interaction --no-progress --no-suggest"

      - name: "Run a static analysis with phpstan/phpstan"
        run: "vendor/bin/phpstan analyse --error-format=checkstyle | cs2pr"

  static-analysis-psalm:
    name: "Static Analysis with Psalm"
    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "7.4"

    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v2"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          php-version: "${{ matrix.php-version }}"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v1"
        with:
          path: "~/.composer/cache"
          key: "php-${{ matrix.php-version }}-composer-locked-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-locked-"

      - name: "Install dependencies with composer"
        run: "composer install --no-interaction --no-progress --no-suggest"

      - name: "Run a static analysis with vimeo/psalm"
        run: "vendor/bin/psalm --show-info=false --stats --output-format=github --threads=4"

  phpunit-sqlite:
    name: "PHPUnit with SQLite"
    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "7.3"
          - "7.4"
        deps:
          - fixed
        include:
          - deps: low
            php-version: "7.3"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"
        with:
          fetch-depth: 2

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          coverage: "pcov"
          tools: pecl
          extensions: "${{ matrix.driver }}-5.7.0preview"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v2"
        with:
          path: "~/.composer/cache"
          key: "php-${{ matrix.php-version }}-composer-locked-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-locked-"

      - name: "Install dependencies with composer"
        run: "composer install --no-interaction --no-progress --no-suggest"
        if: ${{ matrix.deps == 'fixed' }}

      - name: "Install lowest possible dependencies with composer"
        run: "composer update --no-interaction --no-progress --no-suggest --prefer-dist --prefer-lowest"
        if: ${{ matrix.deps == 'low' }}

      - name: "Run PHPUnit"
        run: "vendor/bin/phpunit -c ci/github/phpunit.sqlite.xml --coverage-clover=coverage.xml"

      - name: "Upload Code Coverage"
        uses: "codecov/codecov-action@v1"

  phpunit-oci8:
    name: "PHPUnit on OCI8"
    runs-on: "ubuntu-latest"
    needs: phpunit-sqlite

    strategy:
      matrix:
        php-version:
          - "7.4"

    services:
      oracle:
        image: "wnameless/oracle-xe-11g-r2"
        ports:
          - "1521:1521"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"
        with:
          fetch-depth: 2

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          extensions: "oci8"
          coverage: "pcov"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v1"
        with:
          path: "~/.composer/cache"
          key: "php-${{ matrix.php-version }}-composer-locked-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-locked-"

      - name: "Install dependencies with composer"
        run: "composer install --no-interaction --no-progress --no-suggest"

      - name: "Run PHPUnit"
        run: "vendor/bin/phpunit -c ci/github/phpunit.oci8.xml --coverage-clover=coverage.xml"

      - name: "Upload Code Coverage"
        uses: "codecov/codecov-action@v1"

  phpunit-pdo-oci:
    name: "PHPUnit on PDO_OCI"
    runs-on: "ubuntu-latest"
    needs: phpunit-sqlite

    strategy:
      matrix:
        php-version:
          - "7.4"

    services:
      oracle:
        image: "wnameless/oracle-xe-11g-r2"
        ports:
          - "1521:1521"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"
        with:
          fetch-depth: 2

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          extensions: "pdo_oci"
          coverage: "pcov"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v1"
        with:
          path: "~/.composer/cache"
          key: "php-${{ matrix.php-version }}-composer-locked-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-locked-"

      - name: "Install dependencies with composer"
        run: "composer install --no-interaction --no-progress --no-suggest"

      - name: "Run PHPUnit"
        run: "vendor/bin/phpunit -c ci/github/phpunit.pdo-oci.xml --coverage-clover=coverage.xml"

      - name: "Upload Code Coverage"
        uses: "codecov/codecov-action@v1"

  phpunit-postgres:
    name: "PHPUnit with PostgreSQL"
    runs-on: "ubuntu-latest"
    needs: phpunit-sqlite

    strategy:
      matrix:
        php-version:
          - "7.4"
        postgres-version:
          - "9.3"
          - "9.4"
          - "9.5"
          - "9.6"
          - "10"
          - "11.1"

    services:
      postgres:
        image: postgres:${{ matrix.postgres-version }}
        env:
          POSTGRES_PASSWORD: postgres

        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

        ports:
          - "5432:5432"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"
        with:
          fetch-depth: 2

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          coverage: "pcov"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v2"
        with:
          path: "~/.composer/cache"
          key: "php-${{ matrix.php-version }}-composer-locked-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-locked-"

      - name: "Install dependencies with composer"
        run: "composer install --no-interaction --no-progress --no-suggest"

      - name: "Run PHPUnit"
        run: "vendor/bin/phpunit -c ci/github/phpunit.pgsql.xml --coverage-clover=coverage.xml"

      - name: "Upload Code Coverage"
        uses: "codecov/codecov-action@v1"

  phpunit-mariadb:
    name: "PHPUnit with MariaDB"
    runs-on: "ubuntu-latest"
    needs: phpunit-sqlite

    strategy:
      matrix:
        php-version:
          - "7.4"
        mariadb-version:
          - "10.0"
          - "10.1"
          - "10.2"
          - "10.3"
        driver:
          - "mysqli"
          - "pdo_mysql"

    services:
      mariadb:
        image: mariadb:${{ matrix.mariadb-version }}
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: doctrine_tests

        options: >-
          --health-cmd "mysqladmin ping --silent"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

        ports:
          - "33306:3306"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"
        with:
          fetch-depth: 2

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          coverage: "pcov"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v2"
        with:
          path: "~/.composer/cache"
          key: "php-${{ matrix.php-version }}-composer-locked-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-locked-"

      - name: "Install dependencies with composer"
        run: "composer install --no-interaction --no-progress --no-suggest"

      - name: "Run PHPUnit"
        run: "vendor/bin/phpunit -c ci/github/phpunit.mysql-mariadb.${{ matrix.driver }}.xml --coverage-clover=coverage.xml"

      - name: "Upload Code Coverage"
        uses: "codecov/codecov-action@v1"

  phpunit-mysql:
    name: "PHPUnit with MySQL"
    runs-on: "ubuntu-latest"
    needs: phpunit-sqlite

    strategy:
      matrix:
        php-version:
          - "7.3"
          - "7.4"
        mysql-version:
          - "5.7"
          - "8.0"
        driver:
          - "mysqli"
          - "pdo_mysql"
        config-file:
          - "mysql-mariadb"
        include:
          - mysql-version: '5.7'
            custom-entrypoint: ''
          - mysql-version: '8.0'
            # https://stackoverflow.com/questions/60902904/how-to-pass-mysql-native-password-to-mysql-service-in-github-actions
            custom-entrypoint: >-
              --entrypoint sh mysql:8 -c "exec docker-entrypoint.sh mysqld --default-authentication-plugin=mysql_native_password"
          - config-file: "mysql-tls"
            php-version: "7.4"
            mysql-version: "8.0"
            driver: "mysqli"

    services:
      mysql:
        image: mysql:${{ matrix.mysql-version }}

        options: >-
          --health-cmd "mysqladmin ping --silent"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          -e MYSQL_ALLOW_EMPTY_PASSWORD=yes
          -e MYSQL_DATABASE=doctrine_tests
          ${{ matrix.custom-entrypoint }}

        ports:
          - "33306:3306"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"
        with:
          fetch-depth: 2

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          coverage: "pcov"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v2"
        with:
          path: "~/.composer/cache"
          key: "php-${{ matrix.php-version }}-composer-locked-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-locked-"

      - name: "Install dependencies with composer"
        run: "composer install --no-interaction --no-progress --no-suggest"

      - name: "Copy TLS-related files"
        run: 'docker cp "${{ job.services.mysql.id }}:/var/lib/mysql/ca.pem" . && docker cp "${{ job.services.mysql.id }}:/var/lib/mysql/client-cert.pem" . && docker cp "${{ job.services.mysql.id }}:/var/lib/mysql/client-key.pem" .'
        if: ${{ endsWith(matrix.config-file, 'tls') }}

      - name: "Run PHPUnit"
        run: "vendor/bin/phpunit -c ci/github/phpunit.${{ matrix.config-file }}.${{ matrix.driver }}.xml --coverage-clover=coverage.xml"

      - name: "Upload Code Coverage"
        uses: "codecov/codecov-action@v1"

  phpunit-mssql:
    name: "PHPUnit with MSSQL"
    runs-on: "ubuntu-latest"
    needs: phpunit-sqlite

    strategy:
      matrix:
        php-version:
          - "7.3"
          - "7.4"
        driver:
          - "sqlsrv"
          - "pdo_sqlsrv"
        collation:
          - Latin1_General_100_CI_AS
        include:
          - collation: Latin1_General_100_CS_AS
            php-version: "7.4"
            driver: "sqlsrv"
          - collation: Latin1_General_100_CS_AS
            php-version: "7.4"
            driver: "pdo_sqlsrv"

    services:
      mssql:
        image: microsoft/mssql-server-linux:2017-latest
        env:
          ACCEPT_EULA: 'Y'
          SA_PASSWORD: 'Doctrine2018'
          MSSQL_COLLATION: ${{ matrix.collation }}

        options: >-
          --health-cmd "echo quit | /opt/mssql-tools/bin/sqlcmd -S 127.0.0.1 -l 1 -U sa -P Doctrine2018"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

        ports:
          - "1433:1433"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"
        with:
          fetch-depth: 2

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          coverage: "pcov"
          tools: pecl
          extensions: "${{ matrix.driver }}-5.7.0preview"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v2"
        with:
          path: "~/.composer/cache"
          key: "php-${{ matrix.php-version }}-composer-locked-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-locked-"

      - name: "Install dependencies with composer"
        run: "composer install --no-interaction --no-progress --no-suggest"

      - name: "Run PHPUnit"
        run: "vendor/bin/phpunit -c ci/github/phpunit.${{ matrix.driver }}.xml --coverage-clover=coverage.xml"

      - name: "Upload Code Coverage"
        uses: "codecov/codecov-action@v1"

  phpunit-ibm-db2:
    name: "PHPUnit with IBM DB2"
    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "7.3"

    services:
      ibm_db2:
        image: ibmcom/db2:11.5.0.0
        env:
          DB2INST1_PASSWORD: Doctrine2018
          LICENSE: accept
          DBNAME: doctrine

        options: >-
          --health-cmd "docker logs -f db2 | sed '/(*) Setup has completed./ q'"

        ports:
          - "50000:50000"

    steps:
      - name: "Create database"
        run: "docker exec ${{ job.services.ibm_db2.id }} su - db2inst1 -c 'db2 CREATE DB doctrine && db2 CONNECT TO doctrine && db2 CREATE USER TEMPORARY TABLESPACE doctrine_tbsp PAGESIZE 4 K'"

      - name: "Checkout"
        uses: "actions/checkout@v2"
        with:
          fetch-depth: 2

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          coverage: "pcov"
          tools: pecl
          extensions: "ibm_db2"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v2"
        with:
          path: "~/.composer/cache"
          key: "php-${{ matrix.php-version }}-composer-locked-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-locked-"

      - name: "Install dependencies with composer"
        run: "composer install --no-interaction --no-progress --no-suggest"

      - name: "Run PHPUnit"
        run: "vendor/bin/phpunit -c ci/github/phpunit.ibm_db2.xml --coverage-clover=coverage.xml"

      - name: "Upload Code Coverage"
        uses: "codecov/codecov-action@v1"
